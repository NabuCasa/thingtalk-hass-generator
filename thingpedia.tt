// https://github.com/stanford-oval/thingtalk/blob/master/test/thingpedia.tt
class @com.xkcd
#_[canonical="xkcd"] {
  monitorable query get_comic(in opt number: Number #_[prompt="What Xkcd comic do you want?"] #_[canonical="number"],
                              out title: String #_[canonical="title"],
                              out picture_url: Entity(tt:picture) #_[canonical="picture url"],
                              out link: Entity(tt:url) #_[canonical="link"],
                              out alt_text: String #_[canonical="alt text"])
  #_[canonical="xkcd comic"]
  #_[confirmation="an Xkcd comic"]
  #_[formatted=[{type="rdl",webCallback="${link}",displayTitle="${title}"}, {type="picture",url="${picture_url}"}, {type="text",text="${alt_text}"}]];

  query random_comic(out number: Number #_[canonical="number"],
                     out title: String #_[canonical="title"],
                     out picture_url: Entity(tt:picture) #_[canonical="picture url"],
                     out link: Entity(tt:url) #_[canonical="link"],
                     out alt_text: String #_[canonical="alt text"])
  #_[canonical="random xkcd comic"]
  #_[confirmation="a random Xkcd comic"]
  #_[formatted=[{type="rdl",webCallback="${link}",displayTitle="${title}"}, {type="picture",url="${picture_url}"}, {type="text",text="${alt_text}"}]];

  monitorable list query what_if(out title: String #_[canonical="title"],
                                 out link: Entity(tt:url) #_[canonical="link"],
                                 out updated_time: Date #_[canonical="updated time"])
  #_[canonical="xkcd what if blog posts"]
  #_[confirmation="Xkcd's What If blog posts"]
  #_[formatted=[{type="rdl",webCallback="${link}",displayTitle="${title}"}]];
}
class @org.thingpedia.builtin.thingengine.builtin
#_[canonical="miscellaneous interfaces"] {
  list query get_commands(in req device: Entity(tt:device) #_[prompt="What device do you want help for?"] #_[canonical="device"],
                          out program: Entity(tt:program) #_[canonical="program"])
  #_[canonical="list commands"]
  #_[confirmation="the list of commands of $device"]
  #_[formatted=[{type="text",text="${program}"}]];

  query get_date(out date: Date #_[canonical="date"])
  #_[canonical="get date"]
  #_[confirmation="today's date"]
  #_[formatted=[{type="text",text="Today is ${date:date}."}]];

  monitorable query get_gps(out location: Location #_[prompt="What location are you interested in?"] #_[canonical="location"],
                            out altitude: Measure(m) #_[canonical="altitude"],
                            out bearing: Number #_[canonical="bearing"],
                            out speed: Measure(mps) #_[canonical="speed"])
  #_[canonical="get current location"]
  #_[confirmation="your location"]
  #_[formatted=[{type="text",text="Current Location: ${location}"}]];

  query get_random_between(in req low: Number #_[prompt="What should be the lower bound?"] #_[canonical="low"],
                           in req high: Number #_[prompt="What should be the upper bound?"] #_[canonical="high"],
                           out random: Number #_[canonical="random"])
  #_[canonical="get random integer"]
  #_[confirmation="a random integer between $low and $high"]
  #_[formatted=[{type="text",text="${random}"}]];

  query get_time(out time: Date #_[canonical="time"])
  #_[canonical="get time"]
  #_[confirmation="the current time"]
  #_[formatted=[{type="text",text="Current time is ${time:time}."}]];

  action configure(in req device: Entity(tt:device) #_[prompt="What device do you want to configure?"] #_[canonical="device"])
  #_[canonical="configure"]
  #_[confirmation="configure a new $device"];

  action debug_log(in req message: String #_[prompt="What should I write in the logs?"] #_[canonical="message"])
  #_[canonical="log"]
  #_[confirmation="write $message in the developer logs"];

  action discover()
  #_[canonical="discover"]
  #_[confirmation="search for new devices"];

  action open_url(in req url: Entity(tt:url) #_[prompt="What URL do you want to open?"] #_[canonical="url"])
  #_[canonical="open url on builtin"]
  #_[confirmation="open $url"];

  action say(in req message: String #_[prompt="What do you want me to say?"] #_[canonical="message"])
  #_[canonical="say"]
  #_[confirmation="send me a message $message"];
}
class @light-bulb
#_[canonical="light bulb"] {
  action alert_long()
  #_[canonical="flash alert lights on light bulb"]
  #_[confirmation="flash alerts on your lightbulb"];

  action color_loop()
  #_[canonical="color loop lights on light bulb"]
  #_[confirmation="loop colors on your lightbulb"];

  action set_power(in req power: Enum(on,off) #_[prompt="Do you want to turn it on or off?"] #_[canonical="power"])
  #_[canonical="set power on light bulb"]
  #_[confirmation="turn $power your lightbulb"];
}
class @thermostat
#_[canonical="thermostat"] {
  monitorable query get_humidity(out value: Number #_[canonical="value"])
  #_[canonical="get humidity on thermostat"]
  #_[confirmation="the humidity reported by your thermostat"];

  monitorable query get_hvac_state(out mode: Enum(heat,cool,heat_cool,off) #_[canonical="mode"],
                                   out state: Enum(heating,cooling,off) #_[canonical="state"])
  #_[canonical="get hvac state on thermostat"]
  #_[confirmation="the state of your heating system"];

  monitorable query get_temperature(out value: Measure(C) #_[canonical="value"])
  #_[canonical="get temperature on thermostat"]
  #_[confirmation="the temperature on your thermostat"];

  action set_hvac_mode(in req mode: Enum(heat,cool,heat_cool,off) #_[prompt="What mode do you want to set?"] #_[canonical="mode"])
  #_[canonical="set hvac mode on thermostat"]
  #_[confirmation="set your HVAC to $mode"];

  action set_minmax_temperature(in req low: Measure(C) #_[prompt="What low temperature do you want to set?"] #_[canonical="low"],
                                in req high: Measure(C) #_[prompt="What high temperature do you want to set?"] #_[canonical="high"])
  #_[canonical="set minimum maximum temperature on thermostat"]
  #_[confirmation="set your thermostat between $low and $high"];

  action set_target_temperature(in req value: Measure(C) #_[prompt="What temperature do you want to set?"] #_[canonical="value"])
  #_[canonical="set target temperature on thermostat"]
  #_[confirmation="set your thermostat to $value"];
}
