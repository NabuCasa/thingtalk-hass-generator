class @com.facebook {
  monitorable list query list_photos(in opt album: String,
                                     out date: Date,
                                     out picture_url: Entity(tt:picture));

  monitorable list query list_posts(out id: Entity(com.facebook:id),
                                    out date: Date,
                                    out message: String,
                                    out picture_url: Entity(tt:picture),
                                    out type: Enum(status,photo,link,video),
                                    out link: Entity(tt:url),
                                    out link_title: String);

  action post(in req status: String);

  action post_picture(in req picture_url: Entity(tt:picture),
                      in req caption: String);
}
class @com.google {
}
class @com.twitter {
  monitorable list query direct_messages(out sender: Entity(tt:username),
                                         out message: String);

  monitorable list query home_timeline(out text: String,
                                       out hashtags: Array(Entity(tt:hashtag)),
                                       out urls: Array(Entity(tt:url)),
                                       out author: Entity(tt:username),
                                       out in_reply_to: Entity(tt:username),
                                       out tweet_id: Entity(com.twitter:id));

  monitorable list query my_tweets(out text: String,
                                   out hashtags: Array(Entity(tt:hashtag)),
                                   out urls: Array(Entity(tt:url)),
                                   out in_reply_to: Entity(tt:username),
                                   out tweet_id: Entity(com.twitter:id));

  monitorable list query search(in opt count: Number,
                                out text: String,
                                out hashtags: Array(Entity(tt:hashtag)),
                                out urls: Array(Entity(tt:url)),
                                out author: Entity(tt:username),
                                out in_reply_to: Entity(tt:username),
                                out tweet_id: Entity(com.twitter:id));

  action follow(in req user_name: Entity(tt:username));

  action post(in req status: String);

  action post_picture(in req caption: String,
                      in req picture_url: Entity(tt:picture));

  action retweet(in req tweet_id: Entity(com.twitter:id));

  action send_direct_message(in req to: Entity(tt:username),
                             in req message: String);

  action unfollow(in req user_name: Entity(tt:username));
}
class @org.thingpedia.builtin.bluetooth.generic {
}
class @online-account {
}
class @messaging {
}
class @com.thecatapi {
  query get(out image_id: Entity(com.thecatapi:image_id),
            in opt count: Number,
            out picture_url: Entity(tt:picture),
            out link: Entity(tt:url));
}
class @data-source {
}
class @org.thingpedia.builtin.thingengine.phone {
  monitorable list query sms(out sender: Entity(tt:phone_number),
                             out message: String,
                             out date: Date);

  action call(in req number: Entity(tt:phone_number));

  action call_emergency();

  action put_string(in req str: String);

  action send_sms(in req to: Entity(tt:phone_number),
                  in req message: String);

  action set_ringer(in req mode: Enum(normal,vibrate,silent));
}
class @com.nest {
}
class @thermostat {
  monitorable query get_humidity(out value: Number);

  monitorable query get_hvac_state(out mode: Enum(heat,cool,heat_cool,off),
                                   out state: Enum(heating,cooling,off));

  monitorable query get_temperature(out value: Measure(C));

  action set_hvac_mode(in req mode: Enum(heat,cool,heat_cool,off));

  action set_minmax_temperature(in req low: Measure(C),
                                in req high: Measure(C));

  action set_target_temperature(in req value: Measure(C));
}
class @com.tesla {
}
class @car {
  action honk_horn();
}
class @security-camera {
  monitorable query current_event(out start_time: Date,
                                  out has_sound: Boolean,
                                  out has_motion: Boolean,
                                  out has_person: Boolean,
                                  out picture_url: Entity(tt:picture));

  action set_power(in req power: Enum(on,off));
}
class @com.slack {
  monitorable list query channel_history(out channel: Entity(tt:hashtag),
                                         out date: Date,
                                         out sender: Entity(tt:username),
                                         out message: String);

  monitorable query user_presence(in req username: Entity(tt:username),
                                  out presence: Enum(away,active));

  action send(in req channel: Entity(tt:hashtag),
              in req message: String);

  action send_picture(in req channel: Entity(tt:hashtag),
                      in req caption: String,
                      in req picture_url: Entity(tt:picture));

  action setPresence(in req presence: Enum(away,auto));

  action updateChannelPurpose(in req channel: Entity(tt:hashtag),
                              in req purpose: String);

  action updateChannelTopic(in req channel: Entity(tt:hashtag),
                            in req topic: String);
}
class @org.thingpedia.bluetooth.speaker.a2dp {
  action lower_volume();

  action play_music();

  action raise_volume();

  action set_sink();

  action set_volume(in req percent: Number);
}
class @com.bing {
  monitorable list query image_search(in req query: String,
                                      out title: String,
                                      out picture_url: Entity(tt:picture),
                                      out link: Entity(tt:url),
                                      out width: Number,
                                      out height: Number);

  monitorable list query web_search(in req query: String,
                                    out title: String,
                                    out description: String,
                                    out link: Entity(tt:url));
}
class @com.github {
  monitorable list query get_commit(in req repo_name: Entity(tt:path_name),
                                    out user: Entity(tt:username),
                                    out message: String,
                                    out time: Date,
                                    out modified_files: Array(Entity(tt:path_name)),
                                    out added_files: Array(Entity(tt:path_name)),
                                    out deleted_files: Array(Entity(tt:path_name)));

  query get_file(in req repo_name: Entity(tt:path_name),
                 in req file_name: Entity(tt:path_name),
                 out url: Entity(tt:url));

  monitorable list query get_issue(in req repo_name: Entity(tt:path_name),
                                   out user: Entity(tt:username),
                                   out number: Number,
                                   out title: String,
                                   out body: String,
                                   out time: Date);

  monitorable list query get_issue_comment(in req repo_name: Entity(tt:path_name),
                                           out user: Entity(tt:username),
                                           out issue_number: Number,
                                           out body: String,
                                           out time: Date);

  monitorable list query get_milestone(in req repo_name: Entity(tt:path_name),
                                       out user: Entity(tt:username),
                                       out description: String,
                                       out time: Date,
                                       out title: String);

  monitorable list query get_pull_requests(in req repo_name: Entity(tt:path_name),
                                           out title: String,
                                           out body: String,
                                           out time: Date,
                                           out reviewers: Array(Entity(tt:username)),
                                           out url: Entity(tt:url));

  action add_email(in req email: Entity(tt:email_address));

  action comment_issue(in req repo_name: Entity(tt:path_name),
                       in req issue_number: Number,
                       in req body: String);
}
class @com.xkcd {
  monitorable query get_comic(in opt number: Number,
                              out title: String,
                              out picture_url: Entity(tt:picture),
                              out link: Entity(tt:url),
                              out alt_text: String);

  query random_comic(out number: Number,
                     out title: String,
                     out picture_url: Entity(tt:picture),
                     out link: Entity(tt:url),
                     out alt_text: String);

  monitorable list query what_if(out title: String,
                                 out link: Entity(tt:url),
                                 out updated_time: Date);
}
class @com.yandex.translate {
  query detect_language(in req text: String,
                        out value: Entity(tt:iso_lang_code));

  query translate(in opt source_language: Entity(tt:iso_lang_code),
                  in req target_language: Entity(tt:iso_lang_code),
                  in req text: String,
                  out translated_text: String);
}
class @org.thingpedia.rss {
  monitorable list query get_post(out title: String,
                                  out link: Entity(tt:url));
}
class @com.youtube {
  monitorable list query channels_by_category(in req category_id: Enum(best_of_youtube,recommended,paid,music,comedy,film_and_entertainment,gaming,beauty_and_fashion,from_tv,automotive,animation,sports,diy,tech,science,cooking,causes,news_and_politics,lifestyle),
                                              out channel_id: Entity(com.youtube:channel_id),
                                              out title: String,
                                              out description: String,
                                              out thumbnail: Entity(tt:picture));

  monitorable list query list_subscriptions(out channel_id: Entity(com.youtube:channel_id),
                                            out title: String,
                                            out description: String,
                                            out thumbnail: Entity(tt:picture));

  monitorable list query list_videos(in req channel_id: Entity(com.youtube:channel_id),
                                     out channel_title: String,
                                     out title: String,
                                     out video_id: Entity(com.youtube:video_id),
                                     out video_url: Entity(tt:url),
                                     out description: String,
                                     out thumbnail: Entity(tt:picture));

  monitorable list query search_channel(in req query: String,
                                        out channel_id: Entity(com.youtube:channel_id),
                                        out title: String,
                                        out description: String,
                                        out thumbnail: Entity(tt:picture));

  monitorable list query search_videos(in req query: String,
                                       out video_id: Entity(com.youtube:video_id),
                                       in opt channel_id: Entity(com.youtube:channel_id),
                                       out title: String,
                                       out description: String,
                                       out thumbnail: Entity(tt:picture),
                                       in opt count: Number,
                                       out video_url: Entity(tt:url));
}
class @org.thingpedia.weather {
  monitorable query current(in req location: Location,
                            out temperature: Measure(C),
                            out wind_speed: Measure(mps),
                            out humidity: Number,
                            out cloudiness: Number,
                            out fog: Number,
                            out status: Enum(raining,cloudy,sunny,snowy,sleety,drizzling,windy),
                            out icon: Entity(tt:picture));

  monitorable query forecast(in req location: Location,
                             out date: Date,
                             out temperature: Measure(C),
                             out wind_speed: Measure(mps),
                             out humidity: Number,
                             out cloudiness: Number,
                             out fog: Number,
                             out status: Enum(raining,cloudy,sunny,snowy,sleety,drizzling,windy),
                             out icon: Entity(tt:picture));

  monitorable query moon(in req location: Location,
                         in opt date: Date,
                         out phase: Enum(new_moon,waxing_crescent,first_quarter,waxing_gibbous,full_moon,waning_gibbous,third_quarter,waning_crescent));

  monitorable query sunrise(in req location: Location,
                            in opt date: Date,
                            out sunrise_time: Time,
                            out sunset_time: Time,
                            out sunset: Boolean,
                            out sunrisen: Boolean);
}
class @com.instagram {
  monitorable query get_pictures(in opt count: Number,
                                 out media_id: Entity(instagram:media_id),
                                 out picture_url: Entity(tt:picture),
                                 out caption: String,
                                 out link: Entity(tt:url),
                                 out filter: Entity(com.instagram:filter),
                                 out hashtags: Array(Entity(tt:hashtag)),
                                 out location: Location);
}
class @org.thingpedia.builtin.thingengine.builtin {
  query canned_reply(in req intent: Enum(hello,cool,sorry,thank_you),
                     out text: String);

  list query get_commands(in req device: Entity(tt:device),
                          out program: Entity(tt:program));

  query get_date(out date: Date);

  monitorable query get_gps(out location: Location,
                            out altitude: Measure(m),
                            out bearing: Number,
                            out speed: Measure(mps));

  query get_random_between(in opt low: Number,
                           in opt high: Number,
                           out random: Number);

  query get_time(out time: Date);

  action configure(in req device: Entity(tt:device));

  action debug_log(in req message: String);

  action discover();

  action open_url(in req url: Entity(tt:url));

  action say(in req message: String);
}
class @light-bulb {
  monitorable query power(out power: Enum(on,off));

  action alert_long();

  action color_loop();

  action set_power(in req power: Enum(on,off));
}
class @com.gmail {
  monitorable list query inbox(out sender_name: String,
                               out sender_address: Entity(tt:email_address),
                               out subject: String,
                               out date: Date,
                               out labels: Array(String),
                               out snippet: String,
                               out thread_id: Entity(com.gmail:thread_id),
                               out email_id: Entity(com.gmail:email_id),
                               in opt is_important: Boolean,
                               in opt is_primary: Boolean);

  action forward(in req email_id: Entity(com.gmail:email_id),
                 in req to: Entity(tt:email_address),
                 in req message: String);

  action reply(in req email_id: Entity(com.gmail:email_id),
               in opt subject: String,
               in req message: String);

  action send_email(in req to: Entity(tt:email_address),
                    in req subject: String,
                    in req message: String);

  action send_picture(in req to: Entity(tt:email_address),
                      in req subject: String,
                      in req message: String,
                      in req picture_url: Entity(tt:picture));
}
class @smoke-alarm {
}
class @com.google.drive {
  monitorable list query list_drive_files(out file_id: Entity(com.google.drive:file_id),
                                          out file_name: Entity(tt:path_name),
                                          out mime_type: Entity(tt:mime_type),
                                          out description: String,
                                          out starred: Boolean,
                                          out created_time: Date,
                                          out modified_time: Date,
                                          out file_size: Measure(byte),
                                          in opt order_by: Enum(created_time_increasing,created_time_decreasing,modified_time_increasing,modified_time_decreasing,name_increasing,name_decreasing),
                                          out last_modified_by: String,
                                          out link: Entity(tt:url));

  action create_new_drive_file(in req file_name: Entity(tt:path_name));
}
class @org.thingpedia.icalendar {
  monitorable list query list_events(out start_date: Date,
                                     out end_date: Date,
                                     out summary: String,
                                     out description: String,
                                     out sequence: Number,
                                     out organizer: String,
                                     out location: String,
                                     out status: Enum(scheduled,upcoming,started,ended));
}
class @org.thingpedia.holidays {
  monitorable list query get_holidays(in opt country: Entity(tt:country),
                                      out date: Date,
                                      out summary: String,
                                      out description: String);
}
class @com.dropbox {
  monitorable query get_space_usage(out used_space: Measure(byte),
                                    out total_space: Measure(byte));

  monitorable list query list_folder(in req folder_name: Entity(tt:path_name),
                                     out file_name: Entity(tt:path_name),
                                     out is_folder: Boolean,
                                     out modified_time: Date,
                                     out file_size: Measure(byte),
                                     out full_path: Entity(tt:path_name),
                                     in opt order_by: Enum(modified_time_decreasing,modified_time_increasing,name_decreasing,name_increasing));

  query open(in req file_name: Entity(tt:path_name),
             out url: Entity(tt:url));

  action create_new_folder(in req folder_name: Entity(tt:path_name));

  action move(in req old_name: Entity(tt:path_name),
              in req new_name: Entity(tt:path_name));
}
class @com.imgflip {
  query generate(in req template: Entity(imgflip:meme_id),
                 in req text_top: String,
                 in req text_bottom: String,
                 out picture_url: Entity(tt:picture));

  list query list(out name: String,
                  out picture_url: Entity(tt:picture));
}
class @com.giphy {
  query get(in opt tag: Entity(tt:hashtag),
            out picture_url: Entity(tt:picture));
}
class @media {
}
class @service {
}
class @social-network {
}
class @communication {
}
class @home {
}
class @health {
}
class @data-management {
}
class @com.washingtonpost {
  monitorable list query get_article(in req section: Enum(politics,opinions,local,sports,national,world,business,lifestyle),
                                     out title: String,
                                     out link: Entity(tt:url),
                                     out description: String,
                                     out picture_url: Entity(tt:picture));

  monitorable list query get_blog_post(in req section: Enum(the_fix,politics,powerpost,fact_checker,world_views,compost,the_plum_line,post_partisan,post_everything,right_turn,capital_weather_gang,morning_mix,wonkblog),
                                       out title: String,
                                       out link: Entity(tt:url),
                                       out updated: Date);
}
class @com.phdcomics {
  monitorable list query get_post(out title: String,
                                  out link: Entity(tt:url),
                                  out picture_url: Entity(tt:picture),
                                  out updated_time: Date);
}
class @gov.nasa {
  monitorable query apod(out title: String,
                         out description: String,
                         out picture_url: Entity(tt:picture));

  monitorable query asteroid(out asteroid_id: Entity(gov.nasa:asteroid_id),
                             out name: String,
                             out estimated_diameter_min: Measure(m),
                             out estimated_diameter_max: Measure(m),
                             out is_dangerous: Boolean,
                             out relative_velocity: Measure(mps),
                             out distance: Measure(m),
                             out orbiting_body: String);

  monitorable list query rover(in opt date_taken: Date,
                               in opt count: Number,
                               out picture_url: Entity(tt:picture),
                               out camera_used: Entity(gov.nasa:curiosity_rover_camera));
}
class @com.reddit.frontpage {
  monitorable list query get(out title: String,
                             out link: Entity(tt:url),
                             out user: Entity(tt:username),
                             out category: String,
                             out updated: Date);
}
class @com.lg.tv.webos2 {
  action lower_volume();

  action mute();

  action play_url(in req url: Entity(tt:url));

  action raise_volume();

  action set_power(in req power: Enum(on,off));

  action set_volume(in req percent: Number);

  action unmute();
}
class @com.wsj {
  monitorable list query get(in req section: Enum(opinions,world_news,us_business,markets,technology,lifestyle),
                             out title: String,
                             out link: Entity(tt:url),
                             out updated: Date);
}
class @thingengine-system {
}
class @org.thingpedia.builtin.thingengine {
}
class @org.thingpedia.builtin.thingengine.remote {
}
class @uk.co.thedogapi {
  query get(in opt count: Number,
            out image_id: Entity(dogapi:image_id),
            out picture_url: Entity(tt:picture));
}
class @org.thingpedia.demo.coffee {
  action order(in req beverage: Enum(drip_coffee,espresso,latte,flat_white,mocha,caramel_mocha,white_mocha,macchiato,caramel_macchiato,cappuccino,americano),
               in req delivery_location: Location,
               in req size: Enum(small,medium,large),
               in opt iced: Boolean,
               in opt extras: Enum(none,milk,sugar,both));
}
class @com.nytimes {
  monitorable list query get_front_page(out title: String,
                                        out link: Entity(tt:url),
                                        out updated: Date,
                                        out description: String);

  monitorable list query get_section_page(in req section: Enum(world,us,business,technology,sports,science,health,arts,travel),
                                          out title: String,
                                          out link: Entity(tt:url),
                                          out updated: Date,
                                          out description: String);
}
class @org.thingpedia.builtin.matrix {
}
class @org.thingpedia.builtin.test {
  query dup_data(in req data_in: String,
                 out data_out: String);

  monitorable list query get_data(in req size: Measure(byte),
                                  in opt count: Number,
                                  out data: String);

  action eat_data(in req data: String);
}
class @org.thingpedia.builtin.thingengine.gnome {
  query get_screenshot(out picture_url: Entity(tt:picture));

  action create_file(in req file_name: Entity(tt:path_name),
                     in req contents: String);

  action delete_file(in req file_name: Entity(tt:path_name));

  action lock();

  action open_app(in req app_id: Entity(org.freedesktop:app_id),
                  in opt url: Entity(tt:url));

  action set_background(in req picture_url: Entity(tt:picture));

  action set_power(in req power: Enum(on,off));
}
class @com.icanhazdadjoke {
  query get(out text: String,
            out joke_id: Entity(com.icanhazdadjoke:id));
}
class @com.forismatic.quotes {
  query get(out text: String,
            out author: String);
}
class @com.steampowered {
  monitorable query get_price(in req game_name: String,
                              in opt country: Entity(tt:country),
                              out price: Currency);

  query get_steam_id(in req name: String,
                     out id: Entity(com.steampowered:user_id));
}
class @com.google.contacts {
  monitorable list query get_contacts(out name: String,
                                      out email: Entity(tt:email_address),
                                      out phone_number: Entity(tt:phone_number));
}
class @com.wunderlist {
  list query get_lists(out id: Number,
                       out title: String,
                       out created_at: Date);

  monitorable list query get_tasks(in opt list_title: String,
                                   out id: Number,
                                   out created_at: Date,
                                   out due_date: Date,
                                   out starred: Boolean,
                                   out title: String,
                                   in opt time_window: Number,
                                   in opt completed: Boolean);
}
class @com.wolframalpha {
  query plot(in req query: String,
             out picture_url: Entity(tt:picture));
}
class @com.foxnews {
  monitorable list query get(out title: String,
                             out url: Entity(tt:url),
                             out author: String,
                             out description: String);
}
class @com.spotify {
  monitorable query get_acousticness(in opt song: String,
                                     out acousticness: Number);

  monitorable query get_currently_playing(out song: String);

  monitorable query get_danceability(in opt song: String,
                                     out danceability: Number);

  monitorable query get_energy(in opt song: String,
                               out energy: Number);

  monitorable query get_instrumentalness(in opt song: String,
                                         out instrumentalness: Number);

  monitorable query get_key(in opt song: String,
                            out key: String,
                            out modality: String);

  monitorable query get_liveness(in opt song: String,
                                 out liveness: Number);

  monitorable query get_loudness(in opt song: String,
                                 out loudness: Number);

  monitorable query get_speechiness(in opt song: String,
                                    out speechness: Number);

  monitorable query get_tempo(in opt song: String,
                              out tempo: Number);

  monitorable query get_time_signature(in opt song: String,
                                       out beats: Number);

  monitorable list query get_user_playlist(out playlist: String);

  monitorable list query get_user_playlist_track(in req playlist: String,
                                                 out song: String);

  monitorable list query get_user_top_tracks(out song: String);

  monitorable query get_valence(in opt song: String,
                                out valence: Number);

  action add_album_to_playlist(in req toAdd: String,
                               in req playlist: String);

  action add_songs_to_playlist(in req toAdd: String,
                               in req playlist: String);

  action add_this_song_to_playlist(in req playlist: String);

  action create_new_playlist(in req title: String,
                             in opt description: String,
                             in opt isPublic: Boolean);

  action play_album(in req toPlay: String);

  action play_artist(in req toPlay: String);

  action play_my_playlist(in req toPlay: String);

  action play_playlist(in req toPlay: String);

  action play_seek_seconds(in req seconds: Measure(ms));

  action play_songs(in req toPlay: String);

  action player_next();

  action player_pause();

  action player_play();

  action player_previous();

  action player_repeat(in req repeat: Enum(track,context,off));

  action player_shuffle(in req shuffle: Enum(on,off));

  action save_current_track();
}
class @edu.stanford.cs.roster {
  monitorable query get_instructor_info(in req name: String,
                                        out email: String,
                                        out number: String,
                                        out office: String);
}
class @com.nest.security_camera {
  monitorable query current_event(out start_time: Date,
                                  out has_sound: Boolean,
                                  out has_motion: Boolean,
                                  out has_person: Boolean,
                                  out picture_url: Entity(tt:picture));

  action set_power(in req power: Enum(on,off));
}
class @com.nest.thermostat {
  monitorable query get_humidity(out value: Number);

  monitorable query get_hvac_state(out mode: Enum(heat,cool,heat_cool,off),
                                   out state: Enum(heating,cooling,off));

  monitorable query get_temperature(out value: Measure(C));

  action set_hvac_mode(in req mode: Enum(heat,cool,heat_cool,off));

  action set_minmax_temperature(in req low: Measure(C),
                                in req high: Measure(C));

  action set_target_temperature(in req value: Measure(C));
}
class @com.microsoft.cognitive.vision {
  query generate_description(in req picture_url: Entity(tt:picture),
                             out description: String);
}
class @com.tesla.car {
  monitorable query get_charge_state(out charging_state: String,
                                     out battery_level: Number,
                                     out charge_port_door_open: Boolean,
                                     out charge_port_latch: String);

  monitorable query get_climate_state(out inside_temperature: Measure(C),
                                      out temperature_setting: Measure(C),
                                      out conditioner_on: Boolean);

  monitorable query get_drive_state(out location: Location);

  monitorable query get_mobile_enabled(out mobile_enabled: Boolean);

  monitorable query get_vehicle_state(out odometer: Number,
                                      out locked: Boolean);

  action flash();

  action honk_horn();

  action set_air_conditioning(in req power: Enum(on,off));

  action set_temperature(in req value: Measure(C));

  action wake_up();
}
class @com.fitbit {
  monitorable query getbody(out weight: Measure(kg),
                            out bmi: Number,
                            out fat: Number);

  monitorable query getsteps(in opt date: Date,
                             out steps: Number);

  action recordweight(in req weight: Measure(kg));
}
class @com.nest.smoke_alarm {
}
class @com.cryptonator {
  monitorable query get_price(in req currency: Entity(tt:cryptocurrency_code),
                              out price: Currency);
}
class @org.arxiv {
  monitorable list query query(in opt query: String,
                               in opt category: Entity(org.arxiv:category),
                               out title: String,
                               in opt author: String,
                               out pubDate: Date,
                               out link: Entity(tt:url),
                               out summary: String);
}
class @com.arstechnica {
  monitorable list query index(out title: String,
                               out link: Entity(tt:url),
                               out updated: Date);
}
class @org.hackernews {
  monitorable list query frontpage(out title: String,
                                   out link: Entity(tt:url),
                                   out updated: Date);
}
class @com.time {
  monitorable list query top_stories(out title: String,
                                     out link: Entity(tt:url),
                                     out updated: Date);
}
class @com.bbc {
  monitorable list query top_stories(out title: String,
                                     out link: Entity(tt:url),
                                     out updated: Date,
                                     out description: String);
}
class @com.huffingtonpost {
  monitorable list query frontpage(out title: String,
                                   out link: Entity(tt:url),
                                   out updated: Date,
                                   out description: String);
}
class @org.sup {
  monitorable list query new_books(out title: String,
                                   out link: Entity(tt:url),
                                   out updated: Date,
                                   out description: String);
}
class @com.wired {
  monitorable list query top_stories(out title: String,
                                     out link: Entity(tt:url),
                                     out updated: Date,
                                     out description: String);
}
class @org.slashdot {
  monitorable list query news(out title: String,
                              out link: Entity(tt:url),
                              out updated: Date);
}
class @com.macrumors {
  monitorable list query stories(out title: String,
                                 out link: Entity(tt:url),
                                 out updated: Date);
}
class @com.engadget {
  monitorable list query news(out title: String,
                              out link: Entity(tt:url),
                              out updated: Date);
}
class @com.abcnews {
  monitorable list query top_stories(out title: String,
                                     out link: Entity(tt:url),
                                     out updated: Date,
                                     out description: String);
}
class @com.nature {
  monitorable list query articles(out title: String,
                                  out link: Entity(tt:url),
                                  out updated: Date);
}
class @com.matrix67 {
  monitorable list query posts(out title: String,
                               out link: Entity(tt:url),
                               out updated: Date);
}
class @com.medium {
  monitorable list query articles(in req author: Entity(tt:username),
                                  out title: String,
                                  out link: Entity(tt:url),
                                  out updated: Date);
}
class @com.ted {
  monitorable list query talks(out title: String,
                               out link: Entity(tt:url),
                               out updated: Date,
                               out description: String);
}
class @org.mozilla {
  monitorable list query articles(out title: String,
                                  out link: Entity(tt:url),
                                  out updated: Date);
}
class @com.starwars {
  monitorable list query news(out title: String,
                              out link: Entity(tt:url),
                              out updated: Date);
}
class @edu.stanford.news {
  monitorable list query get(out title: String,
                             out url: Entity(tt:url));
}
class @com.techcrunch {
  monitorable list query news(out title: String,
                              out link: Entity(tt:url),
                              out updated: Date);
}
class @com.herokuapp.cat-fact {
  query random(in req animal: Enum(cat,dog,horse,snail),
               out text: String);
}
class @com.lifehacker {
  monitorable list query articles(out title: String,
                                  out link: Entity(tt:url),
                                  out updated: Date);
}
class @com.howtogeek {
  monitorable list query articles(out title: String,
                                  out link: Entity(tt:url),
                                  out updated: Date);
}
class @ca.randomfox {
  query floof(out link: Entity(tt:url),
              out picture_url: Entity(tt:picture));
}
class @com.cnn {
  monitorable list query top_stories(out title: String,
                                     out link: Entity(tt:url),
                                     out updated: Date);
}
class @com.fortune {
  monitorable list query news(out title: String,
                              out link: Entity(tt:url),
                              out updated: Date);
}
class @com.businessinsider {
  monitorable list query news(out title: String,
                              out link: Entity(tt:url),
                              out updated: Date);
}
class @com.wordsapi {
  monitorable list query definitions(in req word: String,
                                     out definition: String,
                                     out part_of_speech: Enum(noun,verb,adjective,adverb));

  monitorable list query synonyms(in req word: String,
                                  out synonym: String);
}
class @com.uinames {
  query get(out name: String,
            out surname: String,
            out gender: Enum(male,female));
}
class @com.numbersapi {
  query fact(in opt number: Number,
             in opt type: Enum(trivia,math,year),
             out text: String);
}
class @com.poemist {
  query get(out title: String,
            out poem: String,
            out url: Entity(tt:url),
            out poet: String);
}
class @com.whatdoestrumpthink {
  query get(out text: String);
}
class @com.imgur {
  monitorable list query album(in req album_id: Entity(com.imgur:album_id),
                               out description: String,
                               out author: Entity(tt:username),
                               out date: Date,
                               out picture_url: Entity(tt:picture),
                               out width: Number,
                               out height: Number,
                               out is_mature: Boolean);

  monitorable list query comments(in req album_id: Entity(com.imgur:album_id),
                                  out comment: String,
                                  out author: Entity(tt:username),
                                  out date: Date,
                                  out points: Number);

  monitorable list query gallery(in opt section: Enum(hot,user),
                                 in opt order_by: Enum(viral,rising),
                                 out title: String,
                                 out author: Entity(tt:username),
                                 out date: Date,
                                 out picture_url: Entity(tt:picture),
                                 out link: Entity(tt:url),
                                 out points: Number,
                                 out width: Number,
                                 out height: Number,
                                 out hashtags: Array(Entity(tt:hashtag)),
                                 out is_album: Boolean,
                                 out is_mature: Boolean,
                                 out album_id: Entity(com.imgur:album_id));

  monitorable list query search(in req query: String,
                                out title: String,
                                out author: Entity(tt:username),
                                out date: Date,
                                out picture_url: Entity(tt:picture),
                                out link: Entity(tt:url),
                                out points: Number,
                                out width: Number,
                                out height: Number,
                                out hashtags: Array(Entity(tt:hashtag)),
                                out is_album: Boolean,
                                out is_mature: Boolean,
                                out album_id: Entity(com.imgur:album_id));

  action upload(in req picture_url: Entity(tt:picture),
                in req title: String,
                in opt body: String,
                in opt is_mature: Boolean,
                in opt hashtags: Array(Entity(tt:hashtag)),
                in req to_gallery: Boolean);
}
class @com.omdbapi {
  query search(in req title: String,
               out year: Number,
               out director: String,
               out actors: Array(String),
               out plot: String,
               out picture_url: Entity(tt:picture),
               out link: Entity(tt:url),
               out rating: Enum(unknown,general_audiences,parental_guidance_suggested,parents_strongly_cautioned,restricted,adults_only),
               out release_date: Date,
               out genre: String,
               out metascore: Number);
}
class @edu.stanford.almond.nl {
  query analyze(in req text: String,
                out sentiment: Enum(very_negative,negative,neutral,positive,very_positive),
                out tokens: Array(String));
}
class @com.mashable {
  monitorable list query news(out title: String,
                              out link: Entity(tt:url),
                              out updated: Date);
}
class @com.gamespot {
  monitorable list query news(out title: String,
                              out link: Entity(tt:url),
                              out updated: Date);
}
class @com.wikicfp {
  monitorable list query search(in req query: String,
                                out abbr: String,
                                out name: String,
                                out start: Date,
                                out end: Date,
                                out city: String,
                                out deadline: Date,
                                out link: Entity(tt:url));
}
class @rest.kanye {
  query get(out text: String);
}
class @rickygv.stanforddaily {
  monitorable list query get_front_page(out title: String,
                                        out link: Entity(tt:url),
                                        out updated: Date);
}
class @edu.stanford.almond.blog {
  monitorable list query posts(out title: String,
                               out link: Entity(tt:url),
                               out updated: Date,
                               out description: String);
}
class @com.appspot.randomuselessfact {
  query random(out text: String,
               out link: Entity(tt:url));
}
class @co.alphavantage {
  monitorable query get_price(in req company: Entity(tt:stock_id),
                              out price: Currency,
                              out change: Number);
}
class @wesleyliu.wiki {
  list query wikipedia(in req query: String,
                       out title: String,
                       out description: String,
                       out link: Entity(tt:url));
}
class @com.yelp {
  monitorable list query search(in opt query: String,
                                in req location: Location,
                                in opt sort_by: Enum(best_match,rating,review_count,distance),
                                out name: String,
                                out picture_url: Entity(tt:picture),
                                out category: Array(String),
                                out rating: Number,
                                out review_count: Number,
                                out link: Entity(tt:url),
                                out address: Location,
                                out distance: Measure(m),
                                out open: Boolean);
}
class @com.smbc-comics {
  monitorable list query comic(out title: String,
                               out link: Entity(tt:url),
                               out updated: Date);
}
class @io.home-assistant {
}
class @io.home-assistant.air {
  monitorable query state(out state: Enum(gas,smoke,nothing));
}
class @io.home-assistant.battery {
  monitorable query state(out state: Enum(low,normal),
                          out value: Number);
}
class @io.home-assistant.connectivity {
  monitorable query state(out state: Enum(connected,disconnected));
}
class @io.home-assistant.cover {
  monitorable query state(out state: Enum(open,closed));

  action set_openclose(in req state: Enum(open,close));
}
class @io.home-assistant.door {
  monitorable query state(out state: Enum(open,closed));
}
class @io.home-assistant.fan {
  monitorable query oscillation(out state: Enum(oscillating,not_oscillating));

  monitorable query state(out state: Enum(on,off));

  action set_oscillation(in req oscillation: Enum(on,off));

  action set_power(in req power: Enum(on,off));
}
class @io.home-assistant.heat {
  monitorable query state(out state: Enum(hot,cold,normal));
}
class @io.home-assistant.motion {
  monitorable query state(out state: Enum(detecting,not_detecting));
}
class @io.home-assistant.occupancy {
  monitorable query state(out state: Enum(occupied,unoccupied));
}
class @io.home-assistant.plug {
  monitorable query state(out state: Enum(plugged,unplugged));
}
class @io.home-assistant.sound {
  monitorable query state(out state: Enum(detecting,not_detecting));
}
class @io.home-assistant.switch {
  monitorable query state(out state: Enum(on,off));

  action set_power(in req power: Enum(on,off));
}
class @io.home-assistant.vacuum {
  monitorable query state(out state: Enum(on,off,docked),
                          out status: String);

  action pause();

  action return_to_base();

  action set_power(in req power: Enum(on,off));

  action start();

  action stop();
}
